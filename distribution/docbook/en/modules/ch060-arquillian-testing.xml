<chapter xml:id="ChapArquillianTesting">

  <title>Arquillian Test Framework</title>
  
  <sect1 xml:id="SecArquillianOverview">  
    <title>Overview</title>
    
    <para><ulink url="http://jboss.org/arquillian">Arquillian</ulink> is a Test Framework that allows you to run plain JUnit4 test cases from within an OSGi Framework.
    That the test is actually executed in the the OSGi Framework is transparent to your test case. There is no requirement to extend 
    a specific base class. Your OSGi tests execute along side with all your other (non OSGi specific)
    test cases in Maven, Ant, or Eclipse.</para>
    
    <para>Some time ago I was looking for ways to test bundles that are deployed to a remote instance of the 
    <link linkend="ChapRuntime">JBoss OSGi Runtime</link>. I wanted the solution to also work with an OSGi Framework 
    that is bootstrapped from within a JUnit test case.</para>

    <para>The basic problem is of course that you cannot access the artefacts that you deploy in a bundle directly from your test case, 
    because they are loaded from different classloaders.</para>
   
    <mediaobject>
      <imageobject>
        <imagedata  align="center" fileref="images/arquillian-problem.png"/> 
      </imageobject>
    </mediaobject>
    
    <para>For this release, we extended the <ulink url="http://jboss.org/arquillian">Arquillian Test Framework</ulink> to provide support for these requirements.</para>
    
    <itemizedlist>
      <listitem>Test cases SHOULD be plain JUnit4 POJOs</listitem>
      <listitem>There SHOULD be no requirement to extend a specific test base class</listitem>
      <listitem>There MUST be no requirement on a specific test runner (i.e. MUST run with Maven)</listitem>
      <listitem>There SHOULD be a minimum test framework leakage into the test case</listitem>
      <listitem>The test framework MUST support embedded and remote OSGi runtimes with no change required to the test</listitem>
      <listitem>The same test case MUST be executable from outside as well as from within the OSGi Framework</listitem>
      <listitem>There SHOULD be a pluggable communication layer from the test runner to the OSGi Framework</listitem>
      <listitem>The test framework MUST NOT depend on OSGi Framework specific features</listitem>
      <listitem>There MUST be no automated creation of test bundles required by the test framework</listitem>
    </itemizedlist>
    
  </sect1>
  
  <sect1 xml:id="SecArquillianConfiguration">  
    <title>Configuration</title>
    
    <para>In the target OSGi Framework, you need to have the <emphasis role="bold">arquillian-osgi-bundle.jar</emphasis> up and running. 
    For remote testing you also need <emphasis role="bold">jboss-osgi-jmx.jar</emphasis> because Arquillian uses the a standard 
    <ulink url="http://jcp.org/aboutJava/communityprocess/final/jsr160">JSR-160</ulink> to communicate between the test client and the 
    remote OSGi Framework.</para>
   
    <para>See <link linkend="SecBundleJMX">jboss-osgi-jmx</link> on how the JMX protocoll can be configured.</para>
  </sect1>
  
  <sect1 xml:id="SecArquillianWritingTests">  
    <title>Writing Arquillian Tests</title>
    
    <para>In an Arquillian test you</para>
   
    <itemizedlist>
      <listitem>need to use the <emphasis role="bold">@RunWith(Arquillian.class)</emphasis> test runner</listitem>
      <listitem>may have a <emphasis role="bold">@Deployment</emphasis> method that generates the test bundle</listitem>
      <listitem>may have <emphasis role="bold">@Inject BundleContext</emphasis> to get the system BundleContext injected</listitem>
      <listitem>may have <emphasis role="bold">@Inject Bundle</emphasis> to get the test bundle injected</listitem>
    </itemizedlist>
    
    <programlisting role="JAVA">
@RunWith(Arquillian.class)
public class SimpleArquillianTestCase
{
   @Inject
   public Bundle bundle;
   
   @Deployment
   public static JavaArchive createdeployment()
   {
      final JavaArchive archive = ShrinkWrap.create(JavaArchive.class, "example-arquillian");
      archive.addClasses(SimpleActivator.class, SimpleService.class);
      archive.setManifest(new Asset()
      {
         public InputStream openStream()
         {
            OSGiManifestBuilder builder = OSGiManifestBuilder.newInstance();
            builder.addBundleSymbolicName(archive.getName());
            builder.addBundleManifestVersion(2);
            builder.addBundleActivator(SimpleActivator.class.getName());
            return builder.openStream();
         }
      });
      return archive;
   }
   
   @Test
   public void testBundleInjection() throws Exception
   {
      // Assert that the bundle is injected
      assertNotNull("Bundle injected", bundle);
      
      // Assert that the bundle is in state RESOLVED
      // Note when the test bundle contains the test case it 
      // must be resolved already when this test method is called
      assertEquals("Bundle RESOLVED", Bundle.RESOLVED, bundle.getState());
      
      // Start the bundle
      bundle.start();
      assertEquals("Bundle ACTIVE", Bundle.ACTIVE, bundle.getState());
      
      // Get the service reference
      BundleContext context = bundle.getBundleContext();
      ServiceReference sref = context.getServiceReference(SimpleService.class.getName());
      assertNotNull("ServiceReference not null", sref);
      
      // Get the service for the reference
      SimpleService service = (SimpleService)context.getService(sref);
      assertNotNull("Service not null", service);
      
      // Invoke the service 
      int sum = service.sum(1, 2, 3);
      assertEquals(6, sum);
      
      // Stop the bundle
      bundle.stop();
      assertEquals("Bundle RESOLVED", Bundle.RESOLVED, bundle.getState());
   }
}
    </programlisting>
    
  </sect1>
  
</chapter>
