<chapter xml:id="ChapIntroduction">

  <title>Introduction</title>
  
  <sect1 xml:id="SecWhatIsOsgi">
    <title>What is OSGi</title>
    
    <para>The <ulink url="http://www2.osgi.org/Release4/HomePage">Open Services Gateway Initiative (OSGi)</ulink>, 
    specifications define a standardized, component-oriented, computing environment for networked services that is the foundation 
    of an enhanced service-oriented architecture.</para>
  
    <para>The OSGi specification defines two things:</para>
  
    <itemizedlist>
      <listitem>A set of services that an OSGi container must implement</listitem>
      <listitem>A contract between the container and your application</listitem>
    </itemizedlist>
  
    <para>Developing on the OSGi platform means first building your application using OSGi APIs, then deploying it in an OSGi container.</para>
    
    <para>The <ulink url="http://www.jboss.org/community/docs/DOC-13273">JBoss OSGi Project</ulink> project has two distinct goals</para>
    
    <orderedlist>
      <listitem>Provide an integration platform for 3rd party OSGi Frameworks</listitem>
      <listitem>Provide an OSGi compliant framework implementation based on the <ulink url="http://www.jboss.org/jbossmc">JBoss Microcontainer</ulink></listitem>
    </orderedlist>
    
    
    <emphasis role="bold">What does OSGi offer to Java developers?</emphasis>
    
    <para>OSGi modules provide classloader semantics to partially expose code that can then be consumed by other modules. 
    The implementation details of a module, although scoped public by the Java programming language, remain private to the module. 
    On top of that you can install multiple versions of the same code and resolve dependencies by version and other criteria. 
    OSGi also offers advanced security and lifecycle, which I'll explain in more detail further down.</para>
  
    <emphasis role="bold">What kind of applications benefit from OSGi?</emphasis>
    
    <para>Any application that is designed in a modular fashion where it is necessary to start, stop, update individual modules with minimal impact 
    on other modules. Modules can define their own transitive dependencies without the need to resolve these dependencies at the container level. 
    The OSGi platform builds an exellent foundation for the next generation JBoss ESB for example.</para>
  
    <emphasis role="bold">Should Java EE developers adopt the OSGi programming model?</emphasis>
    
    <para>Probably not. The OSGi runtime may be used internally by Java EE container providers to achieve the desired isolation and configuration 
    flexibility that the container wishes to provide. At the application programming level, the Java EE model will continue to exist in its own right, 
    whereas the OSGi model may provide the more suitable runtime environment for applications that require the modular isolation, security and lifecycle 
    management that OSGi offers.</para>
    
  </sect1>
  
  <sect1 xml:id="SecFramworkOverview">
    <title>OSGi Framework Overview</title>
    
    <para>The functionality of the Framework is divided in the following layers:</para>
    
    <itemizedlist>
      <listitem>Security Layer</listitem>
      <listitem>Module Layer</listitem>
      <listitem>Life Cycle Layer</listitem>
      <listitem>Service Layer</listitem>
      <listitem>Actual Services</listitem>
    </itemizedlist>
    
    <mediaobject>
      <imageobject>
        <imagedata  align="center" fileref="images/osgi-layers.png"/> 
      </imageobject>
	  <caption>
	    <para>Source: OSGi Alliance</para>
	  </caption>
    </mediaobject>
    
    <emphasis role="bold">OSGi Security Layer</emphasis>
  
    <para>The OSGi Security Layer is an optional layer that underlies the OSGi Service Platform. 
    The layer is based on the Java 2 security architecture. It provides the infrastructure to deploy and manage 
    applications that must run in fine grained controlled environments.</para>
    
    <para>The OSGi Service Platform can authenticate code in the following ways:</para>

    <itemizedlist>
      <listitem>By location</listitem>
      <listitem>By signer</listitem>
    </itemizedlist>

    <para>For example, an Operator can grant the ACME company the right to use networking on their devices. 
    The ACME company can then use networking in every bundle they digitally sign and deploy on the Operatorâ€™s device. 
    Also, a specific bundle can be granted permission to only manage the life cycle of bundles that are signed by the ACME company.</para>    
    
    <mediaobject>
      <imageobject>
        <imagedata  align="center" fileref="images/osgi-delegation.png"/> 
      </imageobject>
	  <caption>
	    <para>Source: OSGi Alliance</para>
	  </caption>
    </mediaobject>
  
    <emphasis role="bold">OSGi Module Layer</emphasis>
    
    <para>The OSGi Module Layer provides a generic and standardized solution for Java modularization. 
    The Framework defines a unit of modularization, called a bundle. A bundle is comprised of Java classes and other resources, 
    which together can provide functions to end users. Bundles can share Java packages among an exporter bundle and an importer bundle 
    in a well-defined way.</para>

    <para>Once a <emphasis role="bold">Bundle</emphasis> is started, its functionality is provided and services are exposed to other bundles installed in the OSGi Service Platform. 
    A bundle can carry descriptive information about itself in the manifest file that is contained in its JAR file. 
    Here are a few important <emphasis role="bold">Manifest Headers</emphasis> defined by the OSGi Framework:</para>
    
    <itemizedlist>
      <listitem><emphasis role="bold">Bundle-Activator</emphasis> - class used to start, stop the bundle</listitem>
      <listitem><emphasis role="bold">Bundle-SymbolicName</emphasis> - identifies the bundle</listitem>
      <listitem><emphasis role="bold">Bundle-Version</emphasis> - specifies the version of the bundle</listitem>
      <listitem><emphasis role="bold">Export-Package</emphasis> - declaration of exported packages</listitem>
      <listitem><emphasis role="bold">Import-Package</emphasis> - declaration of imported packages</listitem>
    </itemizedlist>
    
    <para>The notion of OSGi Version Range describes a range of versions using a mathematical interval notation. For example</para>
    
    <programlisting>
    Import-Package: com.acme.foo;version="[1.23, 2)", com.acme.bar;version="[4.0, 5.0)"
    </programlisting>
    
    <para>With the OSGi Class Loading Architecture many bundles can share a single virtual machine (VM). 
    Within this VM, bundles can hide packages and classes from other bundles, as well as share packages with other bundles.</para>
    
    <mediaobject>
      <imageobject>
        <imagedata  align="center" fileref="images/osgi-classloader.png"/> 
      </imageobject>
	  <caption>
	    <para>Source: OSGi Alliance</para>
	  </caption>
    </mediaobject>
    
    <para>For example, the following import and export definition resolve correctly because the version range in the import definition 
    matches the version in the export definition:</para>
    
    <programlisting>
    A: Import-Package: p; version="[1,2)"
    B: Export-Package: p; version=1.5.1
    </programlisting>
    
    <mediaobject>
      <imageobject>
        <imagedata  align="center" fileref="images/osgi-version-constraint.png"/> 
      </imageobject>
	  <caption>
	    <para>Source: OSGi Alliance</para>
	  </caption>
    </mediaobject>
  
    <para>Apart from bundle versions, OSGi Attribute Matching is a generic mechanism to allow the importer and exporter to influence the 
    matching process in a declarative way. For example, the following statements will match.</para>

    <programlisting>
    A: Import-Package: com.acme.foo;company=ACME
    B: Export-Package: com.acme.foo;company=ACME; security=false
    </programlisting>

    <para>An exporter can limit the visibility of the classes in a package with the include and exclude directives on the export definition.</para>

    <programlisting>
    Export-Package: com.acme.foo; include:="Qux*,BarImpl"; exclude:=QuxImpl
    </programlisting>
  
    <emphasis role="bold">OSGi Life Cycle Layer</emphasis>
    
    <para>The Life Cycle Layer provides an API to control the security and life cycle operations of bundles.</para>

    <para>A bundle can be in one of the following states:</para>
    
    <mediaobject>
      <imageobject>
        <imagedata  align="center" fileref="images/osgi-life-cycle.png"/> 
      </imageobject>
	  <caption>
	    <para>Source: OSGi Alliance</para>
	  </caption>
    </mediaobject>
    
    <para>A bundle is activated by calling its <emphasis role="bold">Bundle Activator</emphasis> object, if one exists. 
    The BundleActivator interface defines methods that the Framework invokes when it starts and stops the bundle.</para>

    <para>A Bundle Context object represents the execution context of a single bundle within the OSGi Service Platform, 
    and acts as a proxy to the underlying Framework. A <emphasis role="bold">Bundle Context</emphasis> object is created by the Framework when a bundle is started. 
    The bundle can use this private BundleContext object for the following purposes:</para>
    
    <itemizedlist>
      <listitem>Installing new bundles into the OSGi environment</listitem>
      <listitem>Interrogating other bundles installed in the OSGi environment</listitem>
      <listitem>Obtaining a persistent storage area</listitem>
      <listitem>Retrieving service objects of registered services</listitem>
      <listitem>Registering services in the Framework service</listitem>
      <listitem>Subscribing or unsubscribing to Famework events</listitem>
    </itemizedlist>
    
    <emphasis role="bold">OSGi Service Layer</emphasis>
    
    <para>The OSGi Service Layer defines a dynamic collaborative model that is highly integrated with the Life Cycle Layer. 
    The service model is a publish, find and bind model. A service is a normal Java object that is registered under one or more 
    Java interfaces with the service registry.</para>
    
    <mediaobject>
      <imageobject>
        <imagedata  align="center" fileref="images/osgi-service-registration.png"/> 
      </imageobject>
	  <caption>
	    <para>Source: OSGi Alliance</para>
	  </caption>
    </mediaobject>
  </sect1>
  
  <sect1 xml:id="SecServiceCompendium">
    <title>OSGi Service Compendium</title>
    
    <para>The OSGi Service Compendium specifies a number of services that may be available in an OSGi runtime environment. 
    Although the OSGi Framework specification is useful in itself already, it only defines the OSGi core infrastructure. 
    The services defined in the compendium specification define the scope and functionality of some common services that 
    bundle developers might want to use. Here is a quick summary:</para>
    
    <emphasis role="bold">Log Service</emphasis>
    <para>The Log Service provides a general purpose message logger for the OSGi Service Platform. It consists of two services, 
    one for logging information and another for retrieving current or previously recorded log information.</para>
  
    <emphasis role="bold">Http Service</emphasis>
    <para>The Http Service supports two standard techniques for registering servlets and resources to develop communication and 
    user interface solutions for standard technologies such as HTTP, HTML, XML, etc.</para>
  
    <emphasis role="bold">Device Access Specification</emphasis>
    <para>The Device Access specification supports the coordination of automatic detection and attachment of existing devices on 
    an OSGi Service Platform, facilitates hot-plugging and -unplugging of new devices, and downloads and installs device drivers on demand.</para>
  
    <emphasis role="bold">Configuration Admin Service</emphasis>
    <para>The Configuration Admin service allows an Operator to set the configuration information of deployed bundles.</para>
    <mediaobject>
      <imageobject>
        <imagedata  align="center" fileref="images/osgi-config-service.png"/> 
      </imageobject>
	  <caption>
	    <para>Source: OSGi Alliance</para>
	  </caption>
    </mediaobject>
  
    <emphasis role="bold">Metatype Service</emphasis>
    <para>The Metatype Service specification defines interfaces that allow bundle developers to describe attribute 
    types in a computer readable form using so-called metadata.</para>
  
    <emphasis role="bold">Preferences Service</emphasis>
    <para>The Preferences Service allows storage of data that is specific to a particular user.</para>
  
    <emphasis role="bold">User Admin Service</emphasis>
    <para>Bundles can use the User Admin Service to authenticate an initiator and represent this authentication as an Authorization object. 
    Bundles that execute actions on behalf of this user can use the Authorization object to verify if that user is authorized.</para>
  
    <emphasis role="bold">Wire Admin Service</emphasis>
    <para>The Wire Admin Service is an administrative service that is used to control a wiring topology in the OSGi Service Platform. 
    It is intended to be used by user interfaces or management programs that control the wiring of services in an OSGi Service Platform.</para>
  
    <emphasis role="bold">IO Connector Service</emphasis>
    <para>The IO Connector Service specification adopts the Java 2 Micro Edition (J2ME) javax.microedition.io packages as a basic communications 
    infrastructure.</para>
  
    <emphasis role="bold">UPnP Device Service</emphasis>
    <para>The UPnP Device Service specifies how OSGi bundles can be developed that interoperate with UPnP (Universal Plug and Play) 
    devices and UPnP control points.</para>
  
    <emphasis role="bold">Declarative Services Specification</emphasis>
    <para>The Declarative Services specification addresses some of the complications that arise when the OSGi service model is 
    used for larger systems and wider deployments, such as: Startup Time, Memory Footprint, Complexity. The service component 
    model uses a declarative model for publishing, finding and binding to OSGi services.</para>
  
    <emphasis role="bold">Event Admin Service</emphasis>
    <para>The Event Admin Service provides an inter-bundle communication mechanism. It is based on a event publish and subscribe model, popular in many message based systems.</para>
  
    <emphasis role="bold">Deployment Admin Service</emphasis>
    <para>The Deployment Admin Service specification, standardizes the access to some of the responsibilities of the management agent: 
    that is, the lifecycle management of interlinked resources on an OSGi Service Platform.</para>
  
    <emphasis role="bold">Auto Configuration Specification</emphasis>
    <para>The Auto Configuration Specification is to allow the configuration of bundles. 
    These bundles can be embedded in Deployment Packages or bundles that are already present on the OSGi Service Platform.</para>
  
    <emphasis role="bold">Application Admin Service</emphasis>
    <para>The Application Admin Service is intended to simplify the management of an environment with many different types of applications 
    that are simultaneously available.</para>
  
    <emphasis role="bold">DMT Admin Service</emphasis>
    <para>The DMT Admin Service specification defines an API for managing a device using concepts from the OMA DM specifications.</para>
  
    <emphasis role="bold">Monitor Admin Service</emphasis>
    <para>The Monitor Admin Service specification outlines how a bundle can publish Status Variables and how administrative bundles 
    can discover Status Variables as well as read and reset their values.</para>
  
    <emphasis role="bold">Foreign Application Access Specification</emphasis>
    <para>The Foreign Application Access specification is to enable foreign application models like MIDP, Xlets, Applets, other Java 
    application models to participate in the OSGi service oriented architecture.</para>
  
    <emphasis role="bold">Service Tracker Specification</emphasis>
    <para>The Service Tracker specification defines a utility class, ServiceTracker, that makes tracking the registration, modification, 
    and unregistration of services much easier.</para>
  
    <emphasis role="bold">XML Parser Service Specification</emphasis>
    <para>The XML Parser Service specification addresses how the classes defined in JAXP can be used in an OSGi Service Platform.</para>
  
    <emphasis role="bold">Position Specification</emphasis>
    <para>The Position Specification provides bundle developers with a consistent way of handling geographic positions in OSGi applications.</para>
  
    <emphasis role="bold">Measurement and State Specification</emphasis>
    <para>The Measurement and State Specification provides a consistent way of handling a diverse range of measurements for bundle developers.</para>
  
    <emphasis role="bold">Execution Environment Specification</emphasis>
    <para>This Execution Environment Specification defines different execution environments for OSGi Server Platform Servers.</para>
  </sect1>
  
</chapter>
